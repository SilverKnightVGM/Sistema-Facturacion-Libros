/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemafacturacionlibros;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Enzo
 */
public class VentanaPrincipal extends javax.swing.JFrame {

//    Conexion
    Connection c = null;
    Statement stmt = null;

    static final String poolFull = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    static final String poolNums = "0123456789";
    static final String poolChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ";
    static Random ran = new Random();

    public VentanaPrincipal() {
//        try {
//            this.miconexion = new Conexion();
////            for (int i = 0; i < 30; i++) {
////                tempRandomData();
////            }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SQLException ex) {
//            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
        initComponents();
//        JRootPane rootPane = SwingUtilities.getRootPane(btn_searchBar);
//        rootPane.setDefaultButton(btn_searchBar);
        c = Conexion.dbConnector();
        RefreshTablaLibros();
        RefreshTablaCarrito();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel_searchBar = new javax.swing.JPanel();
        btn_searchBar = new javax.swing.JButton();
        Buscar = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        jScrollPane_bottom = new javax.swing.JScrollPane();
        jPanel_bottom = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_cart = new javax.swing.JTable();
        jPanel_btnsCart = new javax.swing.JPanel();
        btn_addToCart = new javax.swing.JButton();
        btn_viewCart = new javax.swing.JButton();
        btn_removeFromCart = new javax.swing.JButton();
        jScrollPane_tableBooks = new javax.swing.JScrollPane();
        table_books = new javax.swing.JTable();
        jPanel_logout = new javax.swing.JPanel();
        Bienvenido = new javax.swing.JLabel();
        btn_logout = new javax.swing.JButton();
        label_userName = new javax.swing.JLabel();
        jPanel_total = new javax.swing.JPanel();
        label_total = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_searchBar.setText("Buscar");
        btn_searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchBarActionPerformed(evt);
            }
        });

        Buscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Buscar.setText("Buscar:");

        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBarFocusGained(evt);
            }
        });
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchBarKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_searchBarLayout = new javax.swing.GroupLayout(jPanel_searchBar);
        jPanel_searchBar.setLayout(jPanel_searchBarLayout);
        jPanel_searchBarLayout.setHorizontalGroup(
            jPanel_searchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_searchBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_searchBar)
                .addContainerGap())
        );
        jPanel_searchBarLayout.setVerticalGroup(
            jPanel_searchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_searchBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_searchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Buscar)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_searchBar)))
        );

        searchBar.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
                table_books.clearSelection();
                table_cart.clearSelection();
            }

            @Override
            public void focusLost(FocusEvent e) {
                //NOTHING
            }
        });

        jPanel_bottom.setPreferredSize(new java.awt.Dimension(970, 446));

        table_cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Título", "Autor", "Precio", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_cart.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(table_cart);

        jPanel_btnsCart.setLayout(new java.awt.GridBagLayout());

        btn_addToCart.setText("Agregar al carrito");
        btn_addToCart.setMaximumSize(new java.awt.Dimension(125, 23));
        btn_addToCart.setMinimumSize(new java.awt.Dimension(125, 23));
        btn_addToCart.setPreferredSize(new java.awt.Dimension(125, 23));
        btn_addToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addToCartActionPerformed(evt);
            }
        });
        jPanel_btnsCart.add(btn_addToCart, new java.awt.GridBagConstraints());

        btn_viewCart.setText("Ver carrito");
        btn_viewCart.setMaximumSize(new java.awt.Dimension(125, 23));
        btn_viewCart.setMinimumSize(new java.awt.Dimension(125, 23));
        btn_viewCart.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel_btnsCart.add(btn_viewCart, new java.awt.GridBagConstraints());

        btn_removeFromCart.setText("Quitar del carrito");
        btn_removeFromCart.setMaximumSize(new java.awt.Dimension(125, 23));
        btn_removeFromCart.setMinimumSize(new java.awt.Dimension(125, 23));
        btn_removeFromCart.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel_btnsCart.add(btn_removeFromCart, new java.awt.GridBagConstraints());

        table_books.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Restantes", "Precio", "Título", "Autor", "Editora", "Edición", "Género"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_books.setMaximumSize(new java.awt.Dimension(600, 64));
        table_books.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane_tableBooks.setViewportView(table_books);

        jPanel_logout.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel_logout.setMaximumSize(new java.awt.Dimension(2147483647, 125));
        jPanel_logout.setLayout(new java.awt.GridBagLayout());

        Bienvenido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Bienvenido.setText("Bienvenido,");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 11, 0, 11);
        jPanel_logout.add(Bienvenido, gridBagConstraints);

        btn_logout.setText("Logout");
        btn_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logoutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 57;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 11, 0, 11);
        jPanel_logout.add(btn_logout, gridBagConstraints);

        label_userName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label_userName.setText("<USER_NAME>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 11, 12, 11);
        jPanel_logout.add(label_userName, gridBagConstraints);

        label_total.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_total.setText("<TOTAL>");

        Total.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Total.setText("Total:");

        javax.swing.GroupLayout jPanel_totalLayout = new javax.swing.GroupLayout(jPanel_total);
        jPanel_total.setLayout(jPanel_totalLayout);
        jPanel_totalLayout.setHorizontalGroup(
            jPanel_totalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_totalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Total)
                .addGap(18, 18, 18)
                .addComponent(label_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_totalLayout.setVerticalGroup(
            jPanel_totalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Total, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(label_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel_bottomLayout = new javax.swing.GroupLayout(jPanel_bottom);
        jPanel_bottom.setLayout(jPanel_bottomLayout);
        jPanel_bottomLayout.setHorizontalGroup(
            jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_bottomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane_tableBooks)
                    .addGroup(jPanel_bottomLayout.createSequentialGroup()
                        .addComponent(jPanel_logout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_bottomLayout.createSequentialGroup()
                                .addComponent(jPanel_btnsCart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE))))
                .addGap(19, 19, 19))
        );
        jPanel_bottomLayout.setVerticalGroup(
            jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_bottomLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane_tableBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel_btnsCart, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jPanel_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_bottomLayout.createSequentialGroup()
                        .addComponent(jPanel_logout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane_bottom.setViewportView(jPanel_bottom);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane_bottom, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(jPanel_searchBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(11, 11, 11)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jScrollPane_bottom, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(495, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addToCartActionPerformed
        // TODO add your handling code here:
        AgregarCarrito();
    }//GEN-LAST:event_btn_addToCartActionPerformed

    private void btn_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_logoutActionPerformed

    private void searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBarFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBarFocusGained

    private void btn_searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchBarActionPerformed
        // TODO add your handling code here:
        BuscarLibros();
    }//GEN-LAST:event_btn_searchBarActionPerformed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBarActionPerformed

    private void searchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            BuscarLibros();
        }
    }//GEN-LAST:event_searchBarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bienvenido;
    private javax.swing.JLabel Buscar;
    private javax.swing.JLabel Total;
    private javax.swing.JButton btn_addToCart;
    private javax.swing.JButton btn_logout;
    private javax.swing.JButton btn_removeFromCart;
    private javax.swing.JButton btn_searchBar;
    private javax.swing.JButton btn_viewCart;
    private javax.swing.JPanel jPanel_bottom;
    private javax.swing.JPanel jPanel_btnsCart;
    private javax.swing.JPanel jPanel_logout;
    private javax.swing.JPanel jPanel_searchBar;
    private javax.swing.JPanel jPanel_total;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane_bottom;
    private javax.swing.JScrollPane jScrollPane_tableBooks;
    private javax.swing.JLabel label_total;
    private javax.swing.JLabel label_userName;
    private javax.swing.JTextField searchBar;
    private javax.swing.JTable table_books;
    private javax.swing.JTable table_cart;
    // End of variables declaration//GEN-END:variables

    private void RefreshTablaLibros() {
        try {
            String sql = "Select * FROM Libros";
            PreparedStatement pst = c.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData rsMd = rs.getMetaData();
            int numeroColumnas = rsMd.getColumnCount();

//            String titulos[] = {"Asignatura", "Creditos", "Nota", "Semestre"};
//            DefaultTableModel modelo = new DefaultTableModel(null, titulos);
//            this.table_books.setModel(modelo);
            DefaultTableModel modelo = (DefaultTableModel) table_books.getModel();
            modelo.setRowCount(0);

            while (rs.next()) {
                Object[] fila = new Object[numeroColumnas];
                for (int y = 0; y < numeroColumnas; y++) {
                    fila[y] = rs.getObject(y + 1);
                }
                modelo.addRow(fila);
            }

            pst.close();
            rs.close();
//            stmt.close();
//            c.close();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void RefreshTablaCarrito() {
        try {
            String sql = "Select ID,Titulo,Autor,Precio,Cantidad FROM Carrito";
            PreparedStatement pst = c.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData rsMd = rs.getMetaData();
            int numeroColumnas = rsMd.getColumnCount();

            DefaultTableModel modelo = (DefaultTableModel) table_cart.getModel();
            modelo.setRowCount(0);

            while (rs.next()) {
                Object[] fila = new Object[numeroColumnas];
                for (int y = 0; y < numeroColumnas; y++) {
                    fila[y] = rs.getObject(y + 1);
                }
                modelo.addRow(fila);
            }

            pst.close();
            rs.close();

        } catch (Exception e) {
            System.out.println("RefreshCarrito" + e.getMessage());
        }
    }

//    private void tempRandomData() throws SQLException {
//        try {
//            Conexion miconexion = new Conexion();
//            stmt = c.createStatement();
//            String sql = "INSERT INTO Libros(Inventario, Precio, Titulo, Autor, Editora, Edicion, Genero) "
//                    + "VALUES("
//                    + miconexion.randomString(ran.nextInt(3) + 1, poolNums, ran)
//                    + "," + miconexion.randomString(ran.nextInt(4) + 1, poolNums, ran)
//                    + ",'" + miconexion.randomString(ran.nextInt(10) + 1, poolChars, ran)
//                    + "','" + miconexion.randomString(ran.nextInt(10) + 1, poolChars, ran)
//                    + "','" + miconexion.randomString(ran.nextInt(10) + 1, poolChars, ran)
//                    + "'," + miconexion.randomString(ran.nextInt(2) + 1, poolNums, ran)
//                    + ",'" + miconexion.randomString(ran.nextInt(10) + 1, poolChars, ran)
//                    + "')";
//            stmt.executeUpdate(sql);
//
//            stmt.close();
//            c.commit();
//            c.close();
//
////            JOptionPane.showMessageDialog(null, "Salvado Correctamente");
//        } catch (Exception e) {
//            System.err.println(e.getClass().getName() + ": " + e.getMessage());
//        }
//    }
    private void BuscarLibros() {
        try {
            String sql = "SELECT * FROM Libros WHERE\n"
                    + "ID LIKE '%" + searchBar.getText() + "%' OR\n"
                    + "Inventario LIKE '%" + searchBar.getText() + "%' OR\n"
                    + "Precio LIKE '%" + searchBar.getText() + "%' OR\n"
                    + "Titulo LIKE '%" + searchBar.getText() + "%' OR\n"
                    + "Autor LIKE '%" + searchBar.getText() + "%' OR\n"
                    + "Editora LIKE '%" + searchBar.getText() + "%' OR\n"
                    + "Edicion LIKE '%" + searchBar.getText() + "%' OR\n"
                    + "Genero LIKE '%" + searchBar.getText() + "%';";
            PreparedStatement pst = c.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData rsMd = rs.getMetaData();
            int numeroColumnas = rsMd.getColumnCount();

            DefaultTableModel modelo = (DefaultTableModel) table_books.getModel();
            modelo.setRowCount(0);

            while (rs.next()) {
                Object[] fila = new Object[numeroColumnas];
                for (int y = 0; y < numeroColumnas; y++) {
                    fila[y] = rs.getObject(y + 1);
                }
                modelo.addRow(fila);
            }

            pst.close();
            rs.close();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public void AgregarCarrito() {

        if (table_books.getSelectedRow() != -1) {
            int row = table_books.getSelectedRow();
            String IdLibro = table_books.getValueAt(row, 0).toString();
            int checkIfAlreadyInCart = checkIfAlreadyInCart(IdLibro);
            
            //Insertar libro en el carrito
            try {

                int cantidadComprar = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Agregar cuantas copias?"));
                int copiasRestantes = Integer.parseInt(table_books.getValueAt(row, 1).toString());

                if (cantidadComprar >= 1 && (cantidadComprar <= copiasRestantes) && (checkIfAlreadyInCart == -1)) {
                    try {
                        String sql = "INSERT INTO Carrito(IDLibro, Titulo, Autor, Precio, Cantidad) "
                                + "VALUES("
                                + IdLibro
                                + ",'" + table_books.getValueAt(row, 3).toString()
                                + "','" + table_books.getValueAt(row, 4).toString()
                                + "'," + table_books.getValueAt(row, 2).toString()
                                + "," + cantidadComprar
                                + ")";

                        PreparedStatement pst = c.prepareStatement(sql);
                        pst.execute();

                        pst.close();

                        RefreshTablaCarrito();
                    } catch (Exception e) {
                        System.err.println("AgregarCarrito" + e.getClass().getName() + ": " + e.getMessage());
                    }
                } else {
                    if (cantidadComprar <= 0) {
                        JOptionPane.showMessageDialog(rootPane, "Cantidad incorrecta!");
                    }
                    if (cantidadComprar >= copiasRestantes) {
                        JOptionPane.showMessageDialog(rootPane, "Demasiadas copias!");
                    }
                    if (checkIfAlreadyInCart >= 0) {
                        JOptionPane.showMessageDialog(rootPane, "Ya esta en el carrito!");
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error! Cantidad incorrecta!");
            }
        }
    }

    public int checkIfAlreadyInCart(String IDLibroParaAgregar) {
        
        int cartCheck = 0;

        try {
            String sql = "Select IDLibro FROM Carrito WHERE IDLibro = ?";
            PreparedStatement pst = c.prepareStatement(sql);
            pst.setString(1, IDLibroParaAgregar);
            ResultSet rs = pst.executeQuery();
            
            if (rs.isBeforeFirst()) {
                System.out.println("Found data");
                cartCheck = 1;
                pst.close();
                rs.close();
            }else{
                System.out.println("No data");
                cartCheck = -1;
                pst.close();
                rs.close();
            }

        } catch (Exception e) {
            System.out.println("checkIfAlreadyInCart" + e.getMessage());
        }
        return cartCheck;
    }
}
